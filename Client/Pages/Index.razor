@page "/"
@using File_Upload_Patrik_God.Shared
@inject HttpClient httpClient
<PageTitle>Upload Files</PageTitle>

<h1>Upload Files</h1>

<InputFile OnChange="@OnInputFileChange" multiple></InputFile>

@if(fileNames.Count > 0)
{
	<ul>
		@foreach (var fileName in fileNames)
		{
			<li>
				File: @fileName
				<br>
				<span>
					Stored File Name: @GetStoredFileName(fileName)
				</span>
			</li>
			
		}
	</ul>
}


@code {
	private int maxAllowedFiles = int.MaxValue;
	private long maxFileSize = long.MaxValue;
	private List<string> fileNames = new();
	private List<UploadResult> uploadResults = new();

	private async Task OnInputFileChange(InputFileChangeEventArgs e)
	{
		using var content = new MultipartFormDataContent();

		foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
		{
			var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
			fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

			fileNames.Add(file.Name);

			content.Add(
				content: fileContent,
				name: "\"files\"",
				fileName: file.Name);
		}

		var response = await httpClient.PostAsync("/api/File", content);
		var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

		if(newUploadResults is not null)
		{
			uploadResults = uploadResults.Concat(newUploadResults).ToList();
		}
	}

	private string? GetStoredFileName(string fileName)
	{
		var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
		if (uploadResult is not null)
			return uploadResult.StoredFileName;
		return "File Not Found";
	}
}
